package src.main;

import java.util.*;

class Item {
    String name;
    double width;
    double height;
    double depth;
    double weight;
    boolean hazardous;

    public Item(String name, double width, double height, double depth, double weight, boolean hazardous) {
        this.name = name;
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.weight = weight;
        this.hazardous = hazardous;
    }
}

class Container {
    double width;
    double height;
    double depth;
    double maxWeight;
    double currentWeight;
    List<Item> items;

    public Container(double width, double height, double depth, double maxWeight) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.maxWeight = maxWeight;
        this.currentWeight = 0;
        this.items = new ArrayList<>();
    }

    public boolean canFitItem(Item item) {
        return width >= item.width && height >= item.height && depth >= item.depth && currentWeight + item.weight <= maxWeight;
    }

    public void addItem(Item item) {
        items.add(item);
        currentWeight += item.weight;
        width -= item.width;
        height -= item.height;
        depth -= item.depth;
    }
}

class FFDAlgorithm {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Container> containers = new ArrayList<>();

        while (true) {
            System.out.println("Create a new container (enter 'n' to stop):");
            System.out.print("Width: ");
            double width = 0;
            if (scanner.hasNextDouble()) {
                width = scanner.nextDouble();
            } else {
                String input = scanner.next();
                if (input.equals("n")) {
                    break; // Exit the loop when 'n' is entered
                } else {
                    System.out.println("Invalid input. Please enter a numeric value or 'n' to stop.");
                    continue;
                }
            }

            System.out.print("Height: ");
            double height = scanner.nextDouble();
            System.out.print("Depth: ");
            double depth = scanner.nextDouble();
            System.out.print("Max Weight: ");
            double maxWeight = scanner.nextDouble();

            containers.add(new Container(width, height, depth, maxWeight));
        }

        // Create a list of items to be shipped (name, width, height, depth, weight, hazardous)
        List<Item> items = new ArrayList<>();
        items.add(new Item("Item 1", 3.0, 2.0, 5.0, 1000.0, false));
        items.add(new Item("Item 2", 2.0, 4.0, 6.0, 1500.0, false));
        items.add(new Item("Item 3", 4.0, 3.0, 7.0, 2000.0, false));
        items.add(new Item("Item 4", 5.0, 2.0, 5.0, 800.0, true));
        // Add more items as needed...

        // Sort items in descending order of volume (height x width x depth)
        Collections.sort(items, (item1, item2) -> {
            double volume1 = item1.height * item1.width * item1.depth;
            double volume2 = item2.height * item2.width * item2.depth;
            return Double.compare(volume2, volume1);
        });

        // Perform the First-Fit Decreasing (FFD) algorithm
        for (Item item : items) {
            boolean itemPlaced = false;
            for (Container container : containers) {
                if (container.canFitItem(item)) {
                    container.addItem(item);
                    itemPlaced = true;
                    break;
                }
            }
            if (!itemPlaced) {
                // Handle the case when an item cannot be placed in any container
                System.out.println("Item " + item.name + " cannot be placed in any container.");
            }
        }

        // Print the results
        int containerNumber = 1;
        for (Container container : containers) {
            System.out.println("Container " + containerNumber++);
            System.out.println("Remaining Space: Width = " + container.width + ", Height = " + container.height
                    + ", Depth = " + container.depth);
            System.out.println("Used Weight: " + container.currentWeight + " / " + container.maxWeight);
            System.out.println("Items in Container:");
            for (Item item : container.items) {
                System.out.println("- " + item.name);
            }
            System.out.println("------------------------");
        }

        scanner.close();

    }
}
