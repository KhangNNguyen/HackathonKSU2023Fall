package src.main;

import java.util.*;

class Item {
    String name;
    double width;
    double height;
    double length; // Replaced "depth" with "length"
    double weight;
    boolean hazardous;
    int quantity;

    public Item(String name, double width, double height, double length, double weight, boolean hazardous, int quantity) {
        this.name = name;
        this.width = width;
        this.height = height;
        this.length = length; // Replaced "depth" with "length"
        this.weight = weight * quantity; // Adjust weight based on quantity
        this.hazardous = hazardous;
        this.quantity = quantity;
    }
}

class Container {
    double width;
    double height;
    double length; // Replaced "depth" with "length"
    double maxWeight;
    double currentWeight;
    List<Item> items;
    int containerNumber = 0;

    public Container(double width, double height, double length, double maxWeight) {
        this.width = width;
        this.height = height;
        this.length = length; // Replaced "depth" with "length"
        this.maxWeight = maxWeight;
        this.currentWeight = 0.0;
        this.items = new ArrayList<>();
        containerNumber ++;
    }

    public boolean canFitItem(Item item) {
        return width >= item.width &&
                height >= item.height &&
                length >= item.length && // Replaced "depth" with "length"
                currentWeight + (item.weight * item.quantity) <= maxWeight;
    }

    public void addItem(Item item) {
        items.add(item);
        currentWeight += (item.weight * item.quantity);
        width -= (item.width * item.quantity);
        height -= (item.height * item.quantity);
        length -= (item.length * item.quantity); // Replaced "depth" with "length"

        // Ensure dimensions are not negative
        if (width < 0) {
            width = 0;
        }
        if (height < 0) {
            height = 0;
        }
        if (length < 0) {
            length = 0;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Container> containers = new ArrayList<>();

        // Function to create a new container
        Runnable createNewContainer = () -> {
            System.out.println("Create a new container:");
            System.out.print("Width: ");
            double width = scanner.nextDouble();
            System.out.print("Height: ");
            double height = scanner.nextDouble();
            System.out.print("Length: "); // Replaced "Depth" with "Length"
            double length = scanner.nextDouble(); // Replaced "depth" with "length"
            System.out.print("Max Weight: ");
            double maxWeight = scanner.nextDouble();

            containers.add(new Container(width, height, length, maxWeight)); // Replaced "depth" with "length"
        };

        createNewContainer.run();

        // Create a list of items to be shipped (name, width, height, length, weight, hazardous, quantity)
        List<Item> items = new ArrayList<>();
        items.add(new Item("Proformer Battery", 0.573, 0.625, 0.917, 37.0, true, 1));
        items.add(new Item("Premium Brake Rotor", 1.083, 0.183, 1.083, 26.4, false, 1));
        items.add(new Item("Proformer Air Filter", 0.773, 0.115, 1.042, 2.0, false, 1));
        // Add more items as needed...

        // Prompt the user for the quantity of each item
        for (Item item : items) {
            System.out.print("Enter quantity for " + item.name + ": ");
            int newQuantity = scanner.nextInt();
            item.quantity = newQuantity;
            item.weight = item.weight * newQuantity; // Update the weight based on the new quantity
        }

        // Sort items in descending order of volume (height x width x length) // Replaced "depth" with "length"
        Collections.sort(items, (item1, item2) -> {
            double volume1 = item1.height * item1.width * item1.length; // Replaced "depth" with "length"
            double volume2 = item2.height * item2.width * item2.length; // Replaced "depth" with "length"
            return Double.compare(volume2, volume1);
        });

        // Perform the First-Fit Decreasing (FFD) algorithm
        for (Item item : items) {
            boolean itemPlaced = false;
            for (Container container : containers) {
                if (container.canFitItem(item)) {
                    container.addItem(item);
                    itemPlaced = true;
                    break;
                }
            }

            if (!itemPlaced) {
                // If there's no container to fit the item, create a new container

                while (true) {
                    System.out.println("Item " + item.name + " (Quantity: " + item.quantity + ") cannot be placed in any container.");
                    createNewContainer.run();
                    boolean placedInNewContainer = false;
                    for (Container container : containers) {
                        if (container.canFitItem(item)) {
                            container.addItem(item);
                            placedInNewContainer = true;
                            break;
                        }
                    }
                    if (placedInNewContainer) {
                        break;
                    }
                }
            }
        }

        // Print the results
        int containerNumber = 1;
        for (Container container : containers) {
            System.out.println("Container " + containerNumber++);
            System.out.println("Remaining Space: Width = " + container.width + " feet , Height = " + container.height
                    + " feet, Length = " + container.length+ " feet"); // Replaced "depth" with "length"

            double usedWeight = 0.0;
            for (Item item : container.items) {
                usedWeight += item.weight;
            }
            System.out.println("Used Weight: " + usedWeight + " / " + container.maxWeight);

            System.out.println("Items in Container:");
            for (Item item : container.items) {
                System.out.println("- " + item.name + " (Quantity: " + item.quantity + ")");
            }
            System.out.println("------------------------");
        }

        scanner.close();
    }
}
