package src.main;

import java.util.*;

class Item {
    String name;
    double width;
    double height;
    double depth;
    double weight;
    boolean hazardous;
    int quantity;

    public Item(String name, double width, double height, double depth, double weight, boolean hazardous, int quantity) {
        this.name = name;
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.weight = weight * quantity; // Adjust weight based on quantity
        this.hazardous = hazardous;
        this.quantity = quantity;
    }
}

class Container {
    double width;
    double height;
    double depth;
    double maxWeight;
    double currentWeight;
    List<Item> items;
    int containerNumber = 0;

    public Container(double width, double height, double depth, double maxWeight) {
        this.width = width;
        this.height = height;
        this.depth = depth;
        this.maxWeight = maxWeight;
        this.currentWeight = 0.0;
        this.items = new ArrayList<>();
        containerNumber ++;
    }

    public boolean canFitItem(Item item) {
        return width >= item.width &&
                height >= item.height &&
                depth >= item.depth &&
                currentWeight + (item.weight * item.quantity) <= maxWeight;
    }

    public void addItem(Item item) {
        items.add(item);
        currentWeight += (item.weight * item.quantity); // Update current weight based on quantity
        width -= (item.width * item.quantity);
        height -= (item.height * item.quantity);
        depth -= (item.depth * item.quantity);
    }
}


class FFDAlgorithm {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Container> containers = new ArrayList<>();

        // Function to create a new container
        Runnable createNewContainer = () -> {
            System.out.println("Create a new container:");
            System.out.print("Width (ft): ");
            double width = scanner.nextDouble();
            System.out.print("Height (ft): ");
            double height = scanner.nextDouble();
            System.out.print("Depth (ft): ");
            double depth = scanner.nextDouble();
            System.out.print("Max Weight (lbs): ");
            double maxWeight = scanner.nextDouble();

            containers.add(new Container(width, height, depth, maxWeight));
        };

        createNewContainer.run();

        // Create a list of items to be shipped (name, width, height, depth, weight, hazardous, quantity)
        List<Item> items = new ArrayList<>();
        items.add(new Item("Item 1", 3.0, 2.0, 5.0, 1.0, false, 1));
        items.add(new Item("Item 2", 2.0, 4.0, 6.0, 15.0, false, 1));
        items.add(new Item("Item 3", 4.0, 3.0, 7.0, 2.0, false, 1));
        items.add(new Item("Item 4", 5.0, 2.0, 5.0, 8.0, true, 1));
        // Add more items as needed...

        // Prompt the user for the quantity of each item
        for (Item item : items) {
            System.out.print("Enter quantity for " + item.name + ": ");
            int newQuantity = scanner.nextInt();
            item.quantity = newQuantity;
            item.weight = item.weight * newQuantity; // Update the weight based on the new quantity
        }

        // Sort items in descending order of volume (height x width x depth)
        Collections.sort(items, (item1, item2) -> {
            double volume1 = item1.height * item1.width * item1.depth;
            double volume2 = item2.height * item2.width * item2.depth;
            return Double.compare(volume2, volume1);
        });

        // Perform the First-Fit Decreasing (FFD) algorithm
        for (Item item : items) {
            boolean itemPlaced = false;
            for (Container container : containers) {
                if (container.canFitItem(item)) {
                    container.addItem(item);
                    itemPlaced = true;
                    break;
                }
            }
            if (!itemPlaced) {
                // If there's no container to fit the item, create a new container
                System.out.println("Item " + item.name + " (Quantity: " + item.quantity + ") cannot be placed in any container.");
                createNewContainer.run();
                // Try placing the item again in the new container
                for (Container container : containers) {
                    if (container.canFitItem(item)) {
                        container.addItem(item);
                        itemPlaced = true;
                        break;
                    }
                }
                if (!itemPlaced) {
                    System.out.println("Item " + item.name + " (Quantity: " + item.quantity + ") cannot be placed even in the new container.");
                }
            }
        }

        // Check if there's available space in containers for additional items
        for (Container container : containers) {
            for (Item item : items) {
                if (container.canFitItem(item)) {
                    System.out.println("Available space in Container " + containerNumber);
                    System.out.println("Enter quantity of " + item.name + " to add (0 to skip): ");
                    int quantityToAdd = scanner.nextInt();
                    if (quantityToAdd > 0) {
                        // Update the container and item accordingly
                        if (quantityToAdd <= item.quantity) {
                            container.addItem(new Item(item.name, item.width, item.height, item.depth, item.weight, item.hazardous, quantityToAdd));
                            item.quantity -= quantityToAdd;
                        } else {
                            System.out.println("Not enough quantity available. Adding maximum available quantity: " + item.quantity);
                            container.addItem(new Item(item.name, item.width, item.height, item.depth, item.weight, item.hazardous, item.quantity));
                            item.quantity = 0;
                        }
                    }
                }
            }
        }

        // Print the results
        int containerNumber = 1;
        for (Container container : containers) {
            System.out.println("Container " + containerNumber++);
            System.out.println("Remaining Space: Width = " + container.width + " feet , Height = " + container.height
                    + " feet, Depth = " + container.depth+ " feet");

            double usedWeight = 0.0;
            for (Item item : container.items) {
                usedWeight += item.weight;
            }
            System.out.println("Used Weight: " + usedWeight + " / " + container.maxWeight);

            System.out.println("Items in Container:");
            for (Item item : container.items) {
                System.out.println("- " + item.name + " (Quantity: " + item.quantity + ")");
            }
            System.out.println("------------------------");
        }

        scanner.close();
    }
}
